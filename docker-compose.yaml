services:
#    main-api:
#        build:
#            context: .
#            dockerfile: docker/local-development/java/Dockerfile
#            target: MAIN-API
#        ports:
#            - "8080:8080"
#        environment:
#            MAIN_API_PORT: "8080"
#        depends_on:
#            postgres:
#                condition: service_healthy
#        networks:
#            - postgres-bridge

#    admin-api:
#        build:
#            context: .
#            dockerfile: docker/local-development/java/Dockerfile
#            target: ADMIN-API
#        ports:
#            - "8081:8081"
#        environment:
#            ADMIN_API_PORT: "8081"
#        depends_on:
#            postgres:
#                condition: service_healthy
#        networks:
#            - postgres-bridge

    postgres:
        image: postgres:14.6-alpine
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
            timeout: 45s
            interval: 10s
            retries: 3
        restart: unless-stopped
        env_file: .env
        ports:
            - "5432:5432"
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ./docker/local-development/postgres/init/:/docker-entrypoint-initdb.d/
        networks:
            - postgres-bridge

#    pgadmin:
#        build:
#            context: docker/local-development/pgadmin
#            dockerfile: Dockerfile
#        env_file: .env
#        environment:
#            PGADMIN_DEFAULT_EMAIL: 'pgadmin4@pgadmin.org'
#            PGADMIN_DEFAULT_PASSWORD: 'admin'
#            PGADMIN_CONFIG_SERVER_MODE: 'False'
#            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
#        volumes:
#            - pgadmin-data:/var/lib/pgadmin
#        healthcheck:
#            test: [ "CMD", "wget", "-O", "-", "http://localhost:80/misc/ping" ]
#            interval: 10s
#            timeout: 10s
#            retries: 5
#        ports:
#            - "5050:80"
#        networks:
#            - postgres-bridge
#        restart: unless-stopped
#        depends_on:
#            - postgres

networks:
    postgres-bridge:

volumes:
    postgres-data:
    pgadmin-data:
